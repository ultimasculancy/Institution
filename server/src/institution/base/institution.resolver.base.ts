/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Institution } from "./Institution";
import { InstitutionCountArgs } from "./InstitutionCountArgs";
import { InstitutionFindManyArgs } from "./InstitutionFindManyArgs";
import { InstitutionFindUniqueArgs } from "./InstitutionFindUniqueArgs";
import { CreateInstitutionArgs } from "./CreateInstitutionArgs";
import { UpdateInstitutionArgs } from "./UpdateInstitutionArgs";
import { DeleteInstitutionArgs } from "./DeleteInstitutionArgs";
import { InstitutionService } from "../institution.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Institution)
export class InstitutionResolverBase {
  constructor(
    protected readonly service: InstitutionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Institution",
    action: "read",
    possession: "any",
  })
  async _institutionsMeta(
    @graphql.Args() args: InstitutionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Institution])
  @nestAccessControl.UseRoles({
    resource: "Institution",
    action: "read",
    possession: "any",
  })
  async institutions(
    @graphql.Args() args: InstitutionFindManyArgs
  ): Promise<Institution[]> {
    return this.service.institutions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Institution, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Institution",
    action: "read",
    possession: "own",
  })
  async institution(
    @graphql.Args() args: InstitutionFindUniqueArgs
  ): Promise<Institution | null> {
    const result = await this.service.institution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Institution)
  @nestAccessControl.UseRoles({
    resource: "Institution",
    action: "create",
    possession: "any",
  })
  async createInstitution(
    @graphql.Args() args: CreateInstitutionArgs
  ): Promise<Institution> {
    return await this.service.createInstitution({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Institution)
  @nestAccessControl.UseRoles({
    resource: "Institution",
    action: "update",
    possession: "any",
  })
  async updateInstitution(
    @graphql.Args() args: UpdateInstitutionArgs
  ): Promise<Institution | null> {
    try {
      return await this.service.updateInstitution({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Institution)
  @nestAccessControl.UseRoles({
    resource: "Institution",
    action: "delete",
    possession: "any",
  })
  async deleteInstitution(
    @graphql.Args() args: DeleteInstitutionArgs
  ): Promise<Institution | null> {
    try {
      return await this.service.deleteInstitution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
